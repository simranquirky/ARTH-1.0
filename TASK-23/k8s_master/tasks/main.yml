---
# tasks file for kube_master
- name: "Installing docker and iproute-tc"
  package:
     name:
         - docker
         - iproute-tc
     state: present
     
- name: "Configuring the Yum repo for kubernetes"
  yum_repository:
     name: kubernetes
     description: Yum for k8s
     baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
     enabled: yes
     gpgcheck: yes
     repo_gpgcheck: yes
     gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
     
- name: "Installing kubeadm,kubelet kubectl program"
  yum:
     name:
        - kubelet
        - kubectl
        - kubeadm
     state: present
     
- name: "Enabling the docker and kubenetes"
  service:
     name: "{{ item }}"
     state: started
     enabled: yes
  loop:
        - kubelet
        - docker
        
- name: "Pulling the config images"
  shell: kubeadm config images pull

- name: "Confuring the docker daemon.json file"
  copy:
     dest: /etc/docker/daemon.json
     src: daemon.json
     
- name: "Restarting the docker service"
  service:
     name: docker
     state: restarted
     
- name: "Configuring the Ip tables and refreshing sysctl"
  copy:
     dest: /etc/sysctl.d/iptables-1.conf
     src: iptables-1.conf
     
- name: "systemctl"
  shell: "sysctl --system"
  
- name: "Starting kubeadm service"
  shell: "kubeadm init --pod-network-cidr={{ ipp }} --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem"

- name: "Creating .kube Directory"
  file:
     path: $HOME/.kube
     state: directory

- name: "Copying file config file"
  shell: "cp -i /etc/kubernetes/admin.conf $HOME/.kube/config"
  ignore_errors: yes

- name: "Installing Addons e.g flannel"
  shell: "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"

- name: "Creating the token"
  shell: "kubeadm token create --print-join-command"
  register: token

- debug:
       msg: "{{ token.stdout }}"

- name: Copy join command to local file
  local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
                         
